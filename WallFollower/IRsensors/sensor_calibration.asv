%% Sensor Calibration and Curve Fit
% Sondre Kongsgard and James Fanchiang
% 10/12/2017
%% Short Range IR Sensor Data
%
clear all;
clc;
% Distance
d = [ 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30];

% Analog value
a = [555, 460, 400, 300, 270, 210, 155, 100, 85, 55];

figure(1); clf; hold on;
plot(d, a, 'ko');
title('Short Range IR Sensor');
xlabel('Distance [cm]'); ylabel('Analog value');


fit(d,a,exp1);

%%  Long Range IR Sensor Data
clear all;
clc;
% Distance
d = [10, 12, 15, 20, 30, 40, 50, 60, 70, 80];

% Analog value
a = [490, 450, 400, 330, 230, 185, 160, 140, 125, 110];

figure(2); clf; hold on;
plot(d, a, 'bo');
title('Long Range IR Sensor');
xlabel('Distance [cm]'); ylabel('Analog value');

%Use cftool
createFitRat23(d,a);

%% createFitRat23.m function
%   createFitRat23.m
% 
%   function [fitresult, gof] = createFitRat23(d, a)
%   %CREATEFIT(D,A)
%   %  Create a fit.
%   %
%   %  Data for 'Fitted Curve' fit:
%   %      X Input : d
%   %      Y Output: a
%   %  Output:
%   %      fitresult : a fit object representing the fit.
%   %      gof : structure with goodness-of fit info.
%   %
%   %  See also FIT, CFIT, SFIT.
% 
%   %  Auto-generated by MATLAB on 12-Oct-2017 12:06:21
% 
% 
%   %% Fit: 'Fitted Curve'.
%   [xData, yData] = prepareCurveData( d, a );
% 
%   % Set up fittype and options.
%   ft = fittype( 'smoothingspline' );
% 
%   % Fit model to data.
%   [fitresult, gof] = fit( xData, yData, ft, 'Normalize', 'on' );
% 
%   % Plot fit with data.
%   h = plot( fitresult, xData, yData );
%   legend( h, 'Analog Output vs. Distance', 'Fitted Curve', 'Location', 'NorthEast' );
%   % Label axes
%   xlabel('Distance (cm)');
%   ylabel ('Analog Output');
%   grid on
%% createFitexp2.m
%   function [fitresult, gof] = createFitexp2(d, a)
%   %CREATEFIT1(D,A)
%   %  Create a fit.
%   %
%   %  Data for 'Fitted Curve' fit:
%   %      X Input : d
%   %      Y Output: a
%   %  Output:
%   %      fitresult : a fit object representing the fit.
%   %      gof : structure with goodness-of fit info.
%   %
%   %  See also FIT, CFIT, SFIT.
%   %  Auto-generated by MATLAB on 12-Oct-2017 13:28:41
% 
% 
%   %% Fit: 'Fitted Curve'.
%   [xData, yData] = prepareCurveData( d, a );
%   %% Set up fittype and options.
%   ft = fittype( 'exp2' );
%   opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
%   opts.Display = 'Off';
%   opts.Normalize = 'on';
%   opts.StartPoint = [406.819274003059 -0.790773877804884 -49.3302971635946 -2.83787732353216];
% 
%   % Fit model to data.
%   [fitresult, gof] = fit( xData, yData, ft, opts );
% 
%   % Plot fit with data.
%   h = plot( fitresult, xData, yData );
%   legend( h, 'Analog Output vs. Distance (cm)', 'Fitted Curve', 'Location', 'NorthEast' );
%   % Label axes
%   xlabel('Distance [cm]'); 
%   ylabel('Analog value');
%   grid on



%% Calibration Equations
%   Short Range Sensor Equation:
%   General model Exp2:
%          f(x) = a*exp(b*x) + c*exp(d*x)
%            where x is normalized by mean 9.186 and std 9.644
%     Coefficients (with 95% confidence bounds):
%            a =       327.5  (276.3, 378.7)
%            b =      -1.132  (-1.528, -0.7353)
%            c =     -0.2471  (-1.278, 0.7837)
%            d =      -8.738  (-12.95, -4.528)
% 
%     Goodness of fit:
%       SSE: 2.503e+04
%       R-square: 0.9602
%       Adjusted R-square: 0.9483
%       RMSE: 50.03
%   
%   Long Range Sensor Equation:
%   General model Rat23:
%          f(x) = (p1*x^2 + p2*x + p3) /
%                    (x^3 + q1*x^2 + q2*x + q3)
%     Coefficients (with 95% confidence bounds):
%            p1 =        6641  (5112, 8171)
%            p2 =  -1.943e+04  (-2.784e+04, -1.103e+04)
%            p3 =       -1236  (-1.51e+04, 1.263e+04)
%            q1 =      -7.766  (-12.13, -3.398)
%            q2 =        96.4  (60.56, 132.2)
%            q3 =      -245.3  (-395.4, -95.09)
% 
%     Goodness of fit:
%       SSE: 1.219e+04
%       R-square: 0.9764
%       Adjusted R-square: 0.968
%       RMSE: 29.51
%



